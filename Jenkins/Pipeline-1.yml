##########pipeline-1 running in slave node###########

pipeline{
    agent any
    tools {
        maven 'maven123'
    }
    stages{
        stage('Checkout') {
            steps {
                git 'https://github.com/dhanapal703278/maven.git'
            }
        }
        stage('Build') {
            steps {
                sh "mvn --version"
                sh "mvn clean install -DskipTests" //DskipTests-it skip tests in this stage
            }
        }
        stage('Test') {
            steps {
                sh "mvn test" //here we are running the tests in this stage
                junit allowEmptyResults: true, testResults: 'target/surefire-reports-/*.xml'
            }
        }
        
        stage('Post tasks') {
            steps {
                sh "echo send an email"
            }
        }
    }
}
##########pipeline-2 running on docker of another agent machine###########
###build docker image  of ubuntu with java, git, maven
$ Dockerfile
FROM ubuntu
LABEL owner="dhanapal"
LABEL Description="creating image with git, maven, java for docker-jenkins-slave"
RUN  apt update -y \
     && apt   install git -y \
     && apt install wget -y \
     && apt install openjdk-11-jdk -y \
     &&  cd /opt \
     && wget  https://dlcdn.apache.org/maven/maven-3/3.8.5/binaries/apache-maven-3.8.5-bin.tar.gz \
     && tar -xvf apache-maven-3.8.5-bin.tar.gz \
     && rm -rf apache-maven-3.8.5-bin.tar.gz  \
     && mv apache-maven-3.8.5  maven \
     && ln -s /opt/maven/bin/mvn /usr/bin/mvn \
     && export PATH=$PATH:/opt/maven/bin \
     &&  echo $PATH
CMD  ["mvn", "--version"]
    
    or
##apline image
$ vim Dockerfile-1
FROM alpine as build
LABEL owner="dhanapal"
LABEL Description="creating image with git, maven, java for docker-jenkins-slave"
RUN  apk update  \
     && apk   add git  \
     && apk add wget  \
     && apk add openjdk11  \
     &&  cd /opt \
     && wget  https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz \
     && tar -xvf apache-maven-3.8.6-bin.tar.gz \
     && rm -rf apache-maven-3.8.6-bin.tar.gz  \
     && mv apache-maven-3.8.6  maven \
     && ln -s /opt/maven/bin/mvn /usr/bin/mvn \
     && export PATH=$PATH:/opt/maven/bin \
     &&  echo $PATH
CMD  ["mvn", "--version"]
    
    
$docker build --tag docker_with_java_git_maven-3.8.5 .
$ docker image tag docker_with_java_git_maven-3.8.5 dhanapal406/jenkins_java_git_maven-3.8.5
$ docker push dhanapal406/jenkins_java_git_maven-3.8.5
->In Pugins we need install Docker Pipeline

$ vim docker-jenkinsfile
pipeline{
    agent {
        docker { 
            image 'dhanapal406/jenkins_java_git_maven-3.8.5' //docker image 
            label 'docker-node' //agent label 
        }
    }
    options {
        //discardbuilds 
        buildDiscarder logRotator(artifactDaysToKeepStr: '30', artifactNumToKeepStr: '10', daysToKeepStr: '5', numToKeepStr: '5')
        
    }
    stages{
        stage('Checkout') {
            steps {
                git 'https://github.com/dhanapal703278/maven.git'
            }
        }
        stage('Build') {
            steps {
                sh "mvn --version"
                sh "mvn clean install"
            }
        }
    }
}
//optional add in docker agent 
//agent {
  //docker {
    //alwaysPull true
    //customWorkspace '/root'
    //image 'dhanapal406/jenkins_java_git_maven-3.8.5'
    //label 'docker-node'
    //registryCredentialsId 'username=dhana, password=ikt@406'
    //reuseNode true
  }
}

:wq

#################build-docker image in pipeline#######
####create credential in 
->Dashboard->click manage jenkins-> click manage Credentials
->Stores scoped to Jenkins(under)
->Jenkins
->Global credentials (unrestricted)->New credentials
->Kind= Username with password
->Scope= Global (Jenkins, nodes, items, all child items, etc)
->Username= dhanapal406(mark Treat username as secret)
->Password= •••••••••
->ID= docker_login
->Description= docker_login
->click create
###Dockerfile in github
$ vim Dockerfile
FROM tomcat
RUN rm -rf /usr/local/tomcat/webapps/ROOT/
COPY webapp.war /usr/local/tomcat/webapps/ROOT/ 
RUN cd /usr/local/tomcat/webapps/ROOT && unzip java-tomcat-maven-example.war && \
    rm -rf /usr/local/tomcat/webapps/ROOT/java-tomcat-maven-example.war
EXPOSE 8080
CMD ["mvn", "run"]
##
-------------------
-------------------
pipeline{
    agent none
    environment {
        DOCKER_LOGIN = credentials('docker_login')
        
    }
    stages {
        stage ('Checkout and Build') {
            agent {
                docker {
                    image 'dhanapal406/jenkins_java_git_maven-3.8.5'
                    label 'docker-node'
                    
                }
                
            }
            steps{
                git 'https://github.com/dhanapal703278/tomcat_maven_app.git'
                sh "mvn clean package"
            }
        }
        stage('Create  a images'){
            agent {
                label 'docker-node'
            }
            steps {
                sh """
                     docker build -t dhanapal406/tomcat_sai-$BUILD_NUMBER .
                     docker login -u $DOCKER_LOGIN_USR -p $DOCKER_LOGIN_PSW
                     docker push dhanapal406/tomcat_sai-$BUILD_NUMBER
                     docker run -itd -p 8080:8080 dhanapal406/tomcat_sai-$BUILD_NUMBER
                """
            }
        }
    }
}
=================================================
#############pipeline-3 with ############

pipeline{
    agent none
    environment {
        DOCKER_LOGIN = credentials('docker_login')
        
    }
    tools {
        maven 'maven123'
    }
    options {
        timestamps()()
        timeout(activity: true, time: 20)
    }

    
    stages {
        stage ('Checkout and Build') {
            agent {
                docker {
                    image 'dhanapal406/jenkins_java_git_maven-3.8.5'
                    label 'docker-node'
                    
                }
                
            }
            steps{
                git 'https://github.com/dhanapal703278/tomcat_maven_app.git'
                sh "mvn clean package"
            }
        }
        stage('Create  a images'){
            agent {
                label 'docker-node'
            }
            steps {
                sh """
                     docker build -t dhanapal406/tomcat_sai-$BUILD_NUMBER .
                     docker login -u $DOCKER_LOGIN_USR -p $DOCKER_LOGIN_PSW
                     docker push dhanapal406/tomcat_sai-$BUILD_NUMBER
                     docker run -itd -p 8080:8080 dhanapal406/tomcat_sai-$BUILD_NUMBER
                """
            }
        }
    }
}
################pipeline for sonarqube scanner#########
 pipeline {
        agent any
        tools 
        stages {
          stage("build & SonarQube analysis") {
            
            steps {
              withSonarQubeEnv('My SonarQube Server') {
                sh 'mvn clean package sonar:sonar'
              }
            }
          }
          stage("Quality Gate") {
            steps {
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
            }
          }
        }
}

###############################final pipeline##############
 pipeline{
    agent none
	tools {
        maven 'maven123'
    }
    options {
        //discardbuilds 
        buildDiscarder logRotator(artifactDaysToKeepStr: '30', artifactNumToKeepStr: '10', daysToKeepStr: '5', numToKeepStr: '5')
        timeout(activity: true, time: 40)
        retry(2)
        timestamps()
        warnError('Error messages')
    }
    environment {
        remote_server_ip = "10.10.1.173 "
        remote_username = "root"
        DOCKER_LOGIN = credentials('docker_login')
    }
    stages{
        stage ('Checkout and Build') {
            agent {
                docker {
                    image 'dhanapal406/jenkins_java_git_maven-3.8.5'
                    label 'docker-node'
                    
                }
                
            }
            steps{
                git 'https://github.com/dhanapal703278/tomcat_maven_app.git'
                sh "mvn --version"
                sh "mvn clean install -DskipTests" //DskipTests-it skip tests in this stage
            }
        }
        stage('Test') {
            agent {
                docker {
                    image 'dhanapal406/jenkins_java_git_maven-3.8.5'
                    label 'docker-node'
                    
                }
                
            }
            steps {
                sh "mvn test" //here we are running the tests in this stage
                junit allowEmptyResults: true, testResults: 'target/surefire-reports-/*.xml'
            }
        }
        stage('work for remote server from jenkins') {
            agent {
                label 'docker-node'
            }
            steps {
                sshagent(['sshagent-scp']) {
                    sh """
                    ssh  -o StrictHostKeyChecking=no  $remote_username@$remote_server_ip  mkdir /opt/jenkins88 ;rm -rf ~/dhana* ; touch ~/dhanafile90 ; rm -rf /opt/jenkins80   
                    ssh  -o StrictHostKeyChecking=no  $remote_username@$remote_server_ip cat /etc/sudoers
                    """ 
                    
                }
                
            }
        }
        /*
        stage("build & SonarQube analysis") {
            agent any
            steps {
                withSonarQubeEnv('My SonarQube Server') {
                    sh 'mvn clean package sonar:sonar'
                    
                } 
            }
        }
        stage("Quality Gate") {
            agent any
            steps {
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
            }
        }
        */
        stage('copy jar or war from master to agent') {
            agent {
                label 'docker-node'
            }
            steps {
                //if we  build is run on server and deploy in another server for it requried jar or war
                sshagent(['sshagent-scp']) {
                    /*<packaging>jar</packaging>
                    <version>1.0-SNAPSHOT</version>
                    <name>my-app</name>
                    above are in pom.xml
					-o StrictHostKeyChecking=no  is do not hostkey check promot for yes or no while copying file
					*/
                    sh " scp -o StrictHostKeyChecking=no  target/java-tomcat-maven-example.war root@10.10.1.173:/opt/pipeline-repo/"
                }
            }
                
        }
        stage('create Image') {
            agent {
                label 'docker-node'
            }
            steps {
                sh """
                    docker build -t dhanapal406/tomcat-$BUILD_NUMBER .
                    docker login -u $DOCKER_LOGIN_USR -p $DOCKER_LOGIN_PSW
                    docker push dhanapal406/tomcat-$BUILD_NUMBER
                    docker run -itd -p 8080:8080 dhanapal406/tomcat-$BUILD_NUMBER
                """
            }
        }
        
    }
}

##############################gathering pipeline snytax from github######
stage('Upload to AWS-S3') {
            steps {
                withAWS(region:'us-east-2',credentials:'AWS Credentials') {
                    s3Upload(pathStyleAccessEnabled:true, payloadSigningEnabled: true, file:'index.html', bucket:'static-jenkins-pipelines-on-aws')
                }
            }
##################shared-library pipeline#####################################

def call(String repoUrl) {
    pipeline {
        agent none
        environment {
            DOCKER_LOGIN = credentials('docker_login')
            
        }
        tools {
        maven 'maven123'
            
        }
        options {
        timestamps()
        timeout(activity: true, time: 20)
            
        }
        stages {
            stage ('Checkout and Build') {
                agent {
                    docker {
                        image 'dhanapal406/jenkins_java_git_maven-3.8.5'
                        label 'docker-node'
                    }
                }
                steps{
                    git branch: 'master',  // branch name source code
                        url: "${repoUrl}" 
                 // git url given has varible here and this git url given in jenkinsfile at the palce varibleof https://github.com/dhanapal703278/tomcat_maven_app.git
                 //@Library('first-shared-lib') _
                 //jenkinsforjava repoUrl(varible_name) 
                 //jenkinsForJava 'https://github.com/dhanapal703278/tomcat_maven_app.git'
                    sh "mvn clean package"
                }
                
            }
            /*stage('Create  a images'){
                agent {
                    label 'docker-node'
                }
                steps {
                sh """
                     docker build -t dhanapal406/tomcat_sai-$BUILD_NUMBER .
                     docker login -u $DOCKER_LOGIN_USR -p $DOCKER_LOGIN_PSW
                     docker push dhanapal406/tomcat_sai-$BUILD_NUMBER
                     docker run -itd -p 8080:8080 dhanapal406/tomcat_sai-$BUILD_NUMBER
                """
                }
            }*/
        }
        post {
            always {
                //deleteDir() /* clean up our workspace */
                //junit '**/target/surefire-reports*.xml'
                //jacoco execPattern: 'build/jacoco/test.exec'
                junit '**/target/*.xml'
            }
            /*success {
                slackSend channel: '#ops-room',
                color: 'good',
                message: "The pipeline ${currentBuild.fullDisplayName} completed successfully.
                
            }
            failure {
                mail to: 'team@example.com',
                     subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                     body: "Something is wrong with ${env.BUILD_URL}"
            }*/
            
        }
    }
}
#########################Script Block in Declarative Pipeline######################
pipeline {
    agent any
    stages {
        stage('Example') {
            steps {
                echo 'Hello World'

                script {
                    def browsers = ['chrome', 'firefox']
                    for (int i = 0; i < browsers.size(); ++i) {
                        echo "Testing the ${browsers[i]} browser"
                    }
                }
            }
        }
    }
}
##################Conditional Statement if, Scripted Pipeline#################
node {
    stage('Example') {
        if (env.BRANCH_NAME == 'master') {
            echo 'I only execute on the master branch'
        } else {
            echo 'I execute elsewhere'
        }
    }
}
####################parameters###############
parameters:
The parameters directive provides a list of parameters that a user should provide when triggering the Pipeline. The values for these user-specified parameters are made available to Pipeline steps via the params object, see the Parameters, Declarative Pipeline for its specific usage.

Required

No

Parameters

None

Allowed

Only once, inside the pipeline block.

Available Parameters
string
A parameter of a string type, for example: parameters { string(name: 'DEPLOY_ENV', defaultValue: 'staging', description: '') }

text
A text parameter, which can contain multiple lines, for example: parameters { text(name: 'DEPLOY_TEXT', defaultValue: 'One\nTwo\nThree\n', description: '') }

booleanParam
A boolean parameter, for example: parameters { booleanParam(name: 'DEBUG_BUILD', defaultValue: true, description: '') }

choice
A choice parameter, for example: parameters { choice(name: 'CHOICES', choices: ['one', 'two', 'three'], description: '') }

password
A password parameter, for example: parameters { password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'A secret password') }

Example 10. Parameters, Declarative Pipeline
pipeline {
    agent any
    parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')

        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')

        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')

        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')

        password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')
    }
    stages {
        stage('Example') {
            steps {
                echo "Hello ${params.PERSON}"

                echo "Biography: ${params.BIOGRAPHY}"

                echo "Toggle: ${params.TOGGLE}"

                echo "Choice: ${params.CHOICE}"

                echo "Password: ${params.PASSWORD}"
            }
        }
    }
}